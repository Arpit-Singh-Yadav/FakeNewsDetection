# -*- coding: utf-8 -*-
"""FND.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QsyEchqRqLGuHj4U0fc3nu--zGS5wfft
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
import re
import string

df_fake = pd.read_csv("/content/Fake.csv")
df_true = pd.read_csv("/content/True.csv")

df_fake.head(10)

df_true.head(10)

df_fake["class"] = 0
df_true["class"] = 1

df_fake.shape, df_true.shape

df_fake_manual_testing = df_fake.tail(10)
for i in range(23480,23470,-1):
  df_fake.drop([i],axis=0,inplace=True)
def_true_manual_testing = df_true.tail(10)
for i in range(21416,21406,-1):
  df_true.drop([i],axis=0,inplace=True)

df_manual_testing=pd.concat([df_fake_manual_testing, def_true_manual_testing],axis=0)
df_manual_testing.to_csv("/content/manual_testing.csv")

df_merge = pd.concat([df_fake,df_true], axis = 0)
df_merge.head(10)

df = df_merge.drop(["title","subject","date"], axis=1)
df.head(10)

df = df.sample(frac=1)

df.head(10)

df.isnull().sum()

def drop(text):
  text = text.lower()
  text = re.sub('\[."?\]', '',text)
  text = re.sub("\\W"," ",text)
  text = re.sub('https?://\S+|www\.\S+', '',text)
  text = re.sub('<.*?>+', '',text)
  text = re.sub('[%s]' % re.escape(string.punctuation), '',text)
  text = re.sub('\n','',text)
  text = re.sub('\w*\d\w*', '',text)
  return text

df["text"]= df["text"].apply(drop)

df.head(10)

x = df["text"]
y = df["class"]

x_train, x_test ,y_train,y_test = train_test_split(x,y, test_size= .25)

vectorization = TfidfVectorizer()
xv_train = vectorization.fit_transform(x_train)
xv_test = vectorization.transform(x_test)

LR = LogisticRegression()
LR.fit(xv_train,y_train)

LR.score(xv_test,y_test)

pred_LR = LR.predict(xv_test)

print(classification_report(y_text,pred_LR))

"""Manual Testing

"""

def Output(n):
  if n==0:
    return "News is Fake"
  elif n==1:
    return "News is not Fake"
  
def manual_testing(news):
  testing_news={"text":[news]}
  new_def_test = pd.DataFrame(testing_news)
  new_def_test["text"]=new_def_test["text"].apply(drop)
  new_x_test = new_def_test["text"]
  new_xv_test = vectorization.transform(new_x_test)
  pred_LR=LR.predict(new_xv_test)
  return ("{}".format(Output(pred_LR)))

news = str(input())
manual_testing(news)